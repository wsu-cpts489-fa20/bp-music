{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/FanAccountDialog.js","components/Checkbox.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/LocationSearch.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","LOCATION_SEARCH","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","FanAccountDialog","cancel","genres","artists","venues","onSubmit","Checkbox","label","isSelected","onCheckboxChange","name","checked","genreList","artistList","venueList","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","Array","from","selectedOptions","item","GPSvalidate","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","showFanDialog","showArtistDialog","showVenueDialog","userData","accountType","keys","genreCheckboxes","filter","checkbox","forEach","console","log","push","artistCheckboxes","venueCheckboxes","artistName","instagramHandle","facebookHandle","streetAddress","phoneNumber","socialMediaLinks","url","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","accountName","confirmDelete","confirmDeleteAccount","e","handleAccountType","renderFanDialog","map","createGenreCheckbox","selectAllGenre","deselectAllGenre","createArtistCheckbox","selectAllArtist","deselectAllArtist","createVenueCheckbox","selectAllVenue","deselectAllVenue","renderArtistDialog","size","placeholder","required","validAddress","renderVenueDialog","selectAllGenreCheckboxes","prevState","selectAllArtistCheckboxes","selectAllVenueCheckboxes","handleGenreCheckboxChange","changeEvent","handleArtistCheckboxChange","handleVenueCheckboxChange","option","key","viewFanAccount","newUserRef","reduce","options","json","parse","userId","autocomplete","pattern","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","rounds","date","substring","course","Number","strokes","minutes","seconds","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","LocationSearch","searchVal","parsedText","candidates","formatted_address","mapUrl","searchResult","validSearch","displayResults","geometry","location","lat","lng","frameborder","border","allowfullscreen","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","localAccount","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e7e95f1.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\",\r\n    LOCATION_SEARCH: \"LocationSearchMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n            <span className=\"fa fa-user\"></span>&nbsp;Account</a>\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a className=\"sidemenu-item\" onClick={() => {this.props.changeMode(AppMode.LOCATION_SEARCH)}}>\r\n            Location Search\r\n          </a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Coming Up</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Events</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Venues</span>\r\n        </a> \r\n        <a className={(this.props.mode === AppMode.LOCATION_SEARCH ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.LOCATION_SEARCH)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Location/Event Finder</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React, { Component, PropTypes } from 'react';\r\n\r\nconst FanAccountDialog = ({cancel, genres, artists, venues}) => {\r\n\r\n    return(\r\n            <div className=\"modal\" role=\"dialog\" id=\"editFanDialog\">\r\n            <div className=\"modal-dialog modal-lg\"></div>\r\n            <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n            <h3><b>My Account</b></h3>\r\n                <button className=\"modal-close\" onClick={cancel}>&times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={cancel}>\r\n            <br/>\r\n            <label>\r\n                Favorited Genres:\r\n            </label>\r\n                {/* <div>\r\n                    {genres.map((favorite, index) => (\r\n                        <div key={index} favorite={favorite} />\r\n                    ))}\r\n                </div> */}\r\n            <br/>\r\n            <label>\r\n                Favorited Artists:\r\n            </label>\r\n                {/* <div>\r\n                    {artists.map((favorite, index) => (\r\n                        <div key={index} favorite={favorite} />\r\n                    ))}\r\n                </div> */}\r\n            <br/>\r\n            <label>\r\n                Favorited Venues:\r\n            </label>\r\n                {/* <div>\r\n                    {venues.map((favorite, index) => (\r\n                        <div key={index} favorite={favorite} />\r\n                    ))}\r\n                </div> */}\r\n            <br/>\r\n            <button role=\"submit\" id=\"fanAccountBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                &nbsp;Edit Fan Account</button>\r\n            </form>\r\n        </div></div></div>\r\n    );\r\n}\r\nexport default FanAccountDialog;\r\n","// All Checkbox was inherited from http://react.tips/checkboxes-in-react-16/\r\nimport React, { Component, PropTypes } from 'react';\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <div className=\"form-check\">\r\n    <label>\r\n      <input\r\n        id=\"checkbox\"\r\n        type=\"checkbox\"\r\n        name={label}\r\n        checked={isSelected}\r\n        onChange={onCheckboxChange}\r\n        className=\"form-check-input\"\r\n      />\r\n      {label}\r\n    </label>\r\n  </div>\r\n);\r\nexport default Checkbox;\r\n","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport FanAccountDialog from './FanAccountDialog.js';\r\nimport Checkbox from './Checkbox.js';\r\n\r\nconst genreList = [\r\n    'Pop',\r\n    'Hip Hop',\r\n    'Rap',\r\n    'Rock',\r\n    'EDM',\r\n    'Country',\r\n    'RnB',\r\n    'Metal'\r\n];\r\nconst artistList = [\r\n    'Post Malone',\r\n    'Ariana Grande', \r\n    'Taylor Swift',\r\n    'Kanye West',\r\n    'Jay-Z',\r\n    'Lil Wayne', \r\n    'Nicki Minaj',\r\n    'Snoop Dog'\r\n];\r\nconst venueList = [\r\n    'Red Rocks Park and Amphitheatre',\r\n    'Hollywood Bowl',\r\n    'Merriweather Post Pavilion',\r\n    'The Showbox',\r\n    'The Underground'\r\n]\r\n\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      accountType: \"fan\",\r\n                      url: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false,\r\n                      showFanDialog: false,\r\n                      showArtistDialog: false,\r\n                      showVenueDialog: false,\r\n                      genres: [],\r\n                      artists: [],\r\n                      venues: [],\r\n                      genreCheckboxes: genreList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {}),\r\n                      artistCheckboxes: artistList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {}),\r\n                      venueCheckboxes: venueList.reduce(\r\n                        (options, option) => ({\r\n                          ...options,\r\n                          [option]: false\r\n                        }), {})\r\n                    };\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = this.state.url;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer,\r\n                           accountType: userData.accountType,\r\n                           url: '/' + userData.accountType + 's/' + this.state.accountName});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else if (event.target.name === \"genres\") {\r\n            this.setState({genres: Array.from(event.target.selectedOptions, (item) => item.value)});\r\n        } else if(event.target.name === \"streetAddress\"){\r\n            this.GPSvalidate();\r\n            this.setState({[event.target.name]: event.target.value,\r\n                formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n        else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        this.setState({showFanDialog: false, showArtistDialog: false, showVenueDialog: false})\r\n        //Initialize account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer,\r\n            accountType: this.state.accountType,\r\n        };\r\n        if (this.state.accountType == \"fan\") {\r\n            userData.genres = this.state.genres;\r\n            userData.artists = this.state.artists;\r\n            userData.venues = this.state.venues;\r\n            Object.keys(this.state.genreCheckboxes).filter(checkbox => this.state.genreCheckboxes[checkbox]).forEach(checkbox => {\r\n                if(this.state.accountType == \"fan\"){\r\n                    console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                } else if(this.state.accountType == \"artist\"){\r\n                    console.log(checkbox, \"is selected and being stored to artist account.\");\r\n                } else {\r\n                    console.log(checkbox, \"is selected and being stored to venue account.\");\r\n                }\r\n                this.state.genres.push(checkbox);\r\n            });\r\n            Object.keys(this.state.artistCheckboxes).filter(checkbox => this.state.artistCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.artists.push(checkbox);\r\n            });\r\n            Object.keys(this.state.venueCheckboxes).filter(checkbox => this.state.venueCheckboxes[checkbox]).forEach(checkbox => {\r\n                console.log(checkbox, \"is selected and being stored to fan account.\");\r\n                this.state.venues.push(checkbox);\r\n            });\r\n        }\r\n        if (this.state.accountType == \"artist\") {\r\n            userData.artistName = this.state.artistName;\r\n            userData.genres = this.state.genres;\r\n            userData.instagramHandle = this.state.instagramHandle;\r\n            userData.facebookHandle = this.state.facebookHandle;  \r\n        }\r\n        if (this.state.accountType == \"venue\") {\r\n            userData.streetAddress = this.state.streetAddress;\r\n            userData.email = this.state.email;\r\n            userData.phoneNumber = this.state.phoneNumber;\r\n            userData.socialMediaLinks = this.state.socialMediaLinks;\r\n        }\r\n        const url = this.state.url;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = this.state.url;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\" id=\"createNewAccountDialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleAccountType}>\r\n            <label>\r\n                Account Type:\r\n                <select name=\"accountType\" id=\"accountType\" value={this.state.accountType} \r\n                    className=\"form-control form-textform-center\" \r\n                    onChange={this.handleChange}>\r\n                    <option id=\"fan\" value=\"fan\">Fan</option>\r\n                    <option id=\"artist\" value=\"artist\">Artist</option>\r\n                    <option id=\"venue\" value=\"venue\">Venue</option>\r\n                </select> \r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Email: \r\n                <input\r\n                id=\"emailInput\"  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                id=\"passwordInput\"\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                id=\"repeatPasswordInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                id=\"displayNameInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                id=\"profilePic\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                id=\"securityQInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                id=\"securityAInput\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" id=\"submitAccountBtn\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{\"Create Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName} deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}/> : null}\r\n        {this.state.create? (this.state.showFanDialog ? this.renderFanDialog() : null) : this.viewFanAccount()}\r\n        {this.state.showArtistDialog ? this.renderArtistDialog() : null}\r\n        {this.state.showVenueDialog ? this.renderVenueDialog() : null}\r\n    </div>\r\n    );\r\n}\r\n\r\nhandleAccountType = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.accountType == \"fan\") {\r\n        this.setState({showFanDialog: true,\r\n            url: '/fans/' + this.state.accountName,\r\n            genres: [],\r\n            artists: [],\r\n            venues: []});\r\n    }\r\n    if (this.state.accountType == \"artist\") {\r\n        this.setState({showArtistDialog: true,\r\n            url: '/artists/' + this.state.accountName,\r\n            artistName: \"\",\r\n            genres: [],\r\n            instagramHandle: \"\",\r\n            facebookHandle: \"\"});\r\n    }\r\n    if (this.state.accountType == \"venue\") {\r\n        this.setState({showVenueDialog: true,\r\n            url: '/venues/' + this.state.accountName,\r\n            streetAddress: \"\",\r\n            email: \"\",\r\n            phoneNumber: \"\",\r\n            socialMediaLinks: \"\"\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nrenderFanDialog = () => {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\" id=\"renderFanDialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Fan Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        <br/>\r\n        <label>\r\n            Genres:\r\n        </label>\r\n        {genreList.map(this.createGenreCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllGenresBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllGenreBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllGenre}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllGenreBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllGenre}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <label>\r\n            Artists:\r\n        </label>\r\n        {artistList.map(this.createArtistCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllArtistsBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllArtistBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllArtist}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllArtistBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllArtist}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <label>\r\n            Venues:\r\n        </label>\r\n        {venueList.map(this.createVenueCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllVenuesBtn\"\r\n                type=\"button\"\r\n                id=\"selectAllVenueBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllVenue}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllVenueBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllVenue}\r\n                > Deselect All </button>\r\n            </div>\r\n        <br/>\r\n        <button role=\"submit\" id=\"fanAccountBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Fan Account</button>\r\n        </form>\r\n    </div></div></div>\r\n    );\r\n}\r\n\r\nrenderArtistDialog = () => {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Artist Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        <br/>\r\n        <label>\r\n            Artist Name:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"artistName\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"Artist Name\"\r\n            required={true}\r\n            value={this.state.artistName}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Genres:\r\n            {genreList.map(this.createGenreCheckbox)}\r\n            <div className=\"form-group mt-2\">\r\n                <button\r\n                id=\"selectAllGenresBtn\"\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.selectAllGenre}\r\n                > Select All </button>\r\n                <button\r\n                type=\"button\"\r\n                id=\"deselectAllGenresBtn\"\r\n                className=\"btn btn-outline-primary mr-2\"\r\n                onClick={this.deselectAllGenre}\r\n                > Deselect All </button>\r\n            </div>\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Instagram:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"instagramHandle\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"@your-handle\"\r\n            required={true}\r\n            value={this.state.instagramHandle}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <label>\r\n            Facebook:\r\n            <input\r\n            className=\"form-control form-text form-center\"\r\n            name=\"facebookHandle\"\r\n            type=\"text\"\r\n            size=\"30\"\r\n            placeholder=\"@your-handle\"\r\n            required={true}\r\n            value={this.state.facebookHandle}\r\n            onChange={this.handleChange}\r\n            />\r\n        </label>\r\n        <br/>\r\n        <button role=\"submit\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Artist Account</button>\r\n        </form>\r\n        </div></div></div>\r\n    );\r\n}\r\n\r\nGPSvalidate = async () => {\r\n    let result = await fetch('location/' + this.state.streetAddress)\r\n    if (result.status === 200) {\r\n        this.setState({validAddress: true});\r\n    }\r\n    else{\r\n        this.setState({validAddress: false});\r\n    }\r\n}\r\n\r\nrenderVenueDialog = () => { \r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n        <div className=\"modal-header\">\r\n        <h3><b>Create Venue Account</b></h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>&times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n        <form onSubmit={this.handleSubmit}>\r\n        Street Address:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"streetAddress\"\r\n                id = \"streetAddress\"\r\n                type=\"text\"\r\n                size=\"40\"\r\n                placeholder=\"123 Example St. Portland, OR\"\r\n                required={true}\r\n                value={this.state.streetAddress}\r\n                onChange={this.handleChange}\r\n                />\r\n        Email:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Email\"\r\n                required={true}\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n                />\r\n        Phone:\r\n        <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"phoneNumber\"\r\n                id=\"phoneNumber\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"666-777-1337\"\r\n                required={true}\r\n                value={this.state.phoneNumber}\r\n                onChange={this.handleChange}\r\n                />\r\n        Social Media Links:\r\n        <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"socialMediaLinks\"\r\n                id=\"socialMediaLinks\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Facebook, Instagram, Etc.\"\r\n                required={true}\r\n                value={this.state.socialMediaLinks}\r\n                onChange={this.handleChange}\r\n                />\r\n        <p></p>\r\n        {this.state.validAddress ? \r\n        <button role=\"submit\" id=\"venueSubmitBtn\" className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n            &nbsp;Create Venue Account</button>\r\n             : null}\r\n        </form>\r\n        </div></div></div>\r\n    );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Create Account Page checkboxes\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Functions for select all checkboxes for genre/artist/venue\r\nselectAllGenreCheckboxes = isSelected => {\r\n    Object.keys(this.state.genreCheckboxes).forEach(checkbox => {\r\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\r\n      this.setState(prevState => ({\r\n        genreCheckboxes: {\r\n          ...prevState.genreCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n  selectAllArtistCheckboxes = isSelected => {\r\n    Object.keys(this.state.artistCheckboxes).forEach(checkbox => {\r\n      this.setState(prevState => ({\r\n        artistCheckboxes: {\r\n          ...prevState.artistCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n  selectAllVenueCheckboxes = isSelected => {\r\n    Object.keys(this.state.venueCheckboxes).forEach(checkbox => {\r\n      // BONUS: Can you explain why we pass updater function to setState instead of an object?\r\n      this.setState(prevState => ({\r\n        venueCheckboxes: {\r\n          ...prevState.venueCheckboxes,\r\n          [checkbox]: isSelected\r\n        }\r\n      }));\r\n    });\r\n  };\r\n\r\n  // Function to update state for select/deselect all checkboxes genre/artist/venue\r\n  selectAllGenre = () => this.selectAllGenreCheckboxes(true);\r\n\r\n  deselectAllGenre = () => this.selectAllGenreCheckboxes(false);\r\n\r\n  selectAllArtist = () => this.selectAllArtistCheckboxes(true);\r\n\r\n  deselectAllArtist = () => this.selectAllArtistCheckboxes(false);\r\n\r\n  selectAllVenue = () => this.selectAllVenueCheckboxes(true);\r\n\r\n  deselectAllVenue = () => this.selectAllVenueCheckboxes(false);\r\n\r\n  // Functions to handle checkboxe changes genre/artist/venue\r\n  handleGenreCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      genreCheckboxes: {\r\n        ...prevState.genreCheckboxes,\r\n        [name]: !prevState.genreCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleArtistCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      artistCheckboxes: {\r\n        ...prevState.artistCheckboxes,\r\n        [name]: !prevState.artistCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  handleVenueCheckboxChange = changeEvent => {\r\n    const { name } = changeEvent.target;\r\n\r\n    this.setState(prevState => ({\r\n      venueCheckboxes: {\r\n        ...prevState.venueCheckboxes,\r\n        [name]: !prevState.venueCheckboxes[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Functions for creating a single checkboxe for genre/artist/venue\r\n  createGenreCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.genreCheckboxes[option]}\r\n      onCheckboxChange={this.handleGenreCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createArtistCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.artistCheckboxes[option]}\r\n      onCheckboxChange={this.handleArtistCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n  createVenueCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={this.state.venueCheckboxes[option]}\r\n      onCheckboxChange={this.handleVenueCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n\r\n  \r\n  // Viewing Fan Account Information Functions\r\n  viewFanAccount = () => (\r\n      <FanAccountDialog\r\n      genres={this.state.genres}\r\n      artists={this.state.artists}\r\n      venues={this.state.venues}\r\n      cancel={this.props.cancel}\r\n      />\r\n  )\r\n}\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div className=\"padded-page\" id=\"loginPage\">\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                id=\"userEmail\"\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                id=\"userPassword\"\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button \r\n                type=\"submit\"\r\n                id=\"loginBtn\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" id=\"createAccountBtn\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://drive.google.com/thumbnail?id=1YMtwfKIdjcTE9rrqphYZ5AhJYnmOsarQ\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\n\r\nclass LocationSearch extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            searchVal: \"\",\r\n            searchResult: {},\r\n            validSearch: false,\r\n            mapUrl: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        let result = await fetch('location/' + this.state.searchVal)\r\n\r\n        if (result.status === 200) {\r\n            let text = await result.text();\r\n            let parsedText = JSON.parse(text);\r\n            result = await fetch('map/' + parsedText.candidates[0].formatted_address);\r\n            let mapUrl = await result.text();\r\n            this.setState({ searchResult: JSON.parse(text), validSearch: true, mapUrl: mapUrl});\r\n        } else {\r\n            this.setState({ searchResult: {}, validSearch: false, mapUrl: \"\"});\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    displayResults = () => {\r\n        return (\r\n            <div>\r\n                <div>Name: {this.state.searchResult.candidates[0].name}</div>\r\n                <div>Address: {this.state.searchResult.candidates[0].formatted_address}</div>\r\n                <div>Latitude: {this.state.searchResult.candidates[0].geometry.location.lat}</div>\r\n                <div>Longitude: {this.state.searchResult.candidates[0].geometry.location.lng}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n                <center>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label>Enter a search<br />\r\n                            <input className=\"form-control form-text form-center\"\r\n                                name=\"searchVal\"\r\n                                type=\"text\"\r\n                                value={this.state.searchVal}\r\n                                onChange={this.handleChange}>\r\n                            </input>\r\n                        </label>\r\n                        <br />\r\n                        <button role=\"submit\">Submit</button>\r\n                    </form>\r\n                    {this.state.validSearch ? this.displayResults() : null}\r\n                    <iframe\r\n                        width=\"400\"\r\n                        height=\"300\"\r\n                        frameborder=\"0\" style={{border: 0}}\r\n                        src={this.state.mapUrl} allowfullscreen>\r\n                    </iframe> \r\n                </center>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LocationSearch;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport LocationSearch from './LocationSearch.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"URScene Login\";\r\nmodeTitle[AppMode.FEED] = \"Events near you\";\r\nmodeTitle[AppMode.ROUNDS] = \"My events\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Enter new event\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Event\";\r\nmodeTitle[AppMode.COURSES] = \"Venues\";\r\nmodeTitle[AppMode.LOCATION_SEARCH] = \"Location Search\"\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.LOCATION_SEARCH] = LocationSearch;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div>\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}\r\n            changeMode={this.handleChangeMode}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}